# Use a slim Python image
FROM python:3.10-slim-buster

# Set environment variables for non-interactive commands
ENV PYTHONUNBUFFERED=1

# Set the working directory inside the container
WORKDIR /app

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    gcc && \
    rm -rf /var/lib/apt/lists/*

# Install Poetry
# We use the official installer script
ENV POETRY_HOME="/opt/poetry"
ENV PATH="${POETRY_HOME}/bin:${PATH}"
RUN curl -sSL https://install.python-poetry.org | python3 -

# Copy Poetry project files first to leverage Docker's build cache
COPY pyproject.toml poetry.lock /app/

# Install project dependencies, including dev dependencies for development
# --no-root: do not install the project itself as a package
# --sync: remove packages that are not in the lock file
RUN poetry install --no-root --sync

# Copy the rest of the application code
COPY . /app/

# Expose the port Django will run on
EXPOSE 8000

# Command to run the Django development server
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]