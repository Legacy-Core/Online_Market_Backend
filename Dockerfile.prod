# --- Builder Stage ---
# This stage installs all Python dependencies using Poetry
FROM python:3.10-slim-buster as builder

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

# Install system dependencies needed for building Python packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    gcc && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install Poetry
ENV POETRY_HOME="/opt/poetry"
ENV PATH="${POETRY_HOME}/bin:${PATH}"
RUN curl -sSL https://install.python-poetry.org | python3 -

# Copy Poetry project files
COPY pyproject.toml poetry.lock /app/

# Install project dependencies (excluding development dependencies for production)
# --no-root: Do not install the project itself.
# --without dev: Exclude the 'dev' dependency group.
# --sync: Remove packages not in the lock file.
# --no-cache-dir: Prevents pip from storing its cache, saving image space.
RUN poetry install --no-root --without dev --sync --no-interaction --no-ansi

# --- Runner Stage ---
# This stage is for the final, lean production image
FROM python:3.10-slim-buster

ENV PYTHONUNBUFFERED 1
ENV PYTHONDONTWRITEBYTECODE 1

# Install only runtime system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libpq-dev && \ # Needed if you use psycopg2-binary
    rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the Python virtual environment/site-packages from the builder stage
# This ensures that Poetry itself is not in the final image, only the installed packages.
COPY --from=builder ${POETRY_HOME}/venvs /opt/poetry/venvs
COPY --from=builder /app/myproject/.venv /app/.venv # Copy if virtualenv is in-project

# Add the virtual environment's bin to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy the application code
COPY . /app/

# Collect static files using the installed Django in the virtual env
# Make sure your settings.py has STATIC_ROOT configured (e.g., STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles'))
RUN python manage.py collectstatic --noinput

# Expose the port Gunicorn will run on
EXPOSE 8000

# Command to run Gunicorn
COPY entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

ENTRYPOINT ["/app/entrypoint.sh"]